import React, { useEffect, useState } from 'react'
import { useFormik } from 'formik'
import { wrapSchema } from './wrapSchema'
import { Token, tokens } from 'shared/utils/config'

function WrapForm() {
  const [generalErrorMessage, setGeneralErrorMessage] = useState<String>('')

  const formik = useFormik({
    initialValues: {
      amount: '',
      token: '',
      wrappingMode: 'wrap'
    },
    validationSchema: wrapSchema,
    validateOnBlur: false,
    validateOnChange: true,
    onSubmit: async (values) => {
      try {
        setGeneralErrorMessage('')
        const response: any = null
        if (response.error) {
          setGeneralErrorMessage(response.error)
          return
        }

        if (response.data) {
          alert('Login Successful!')
          console.log('Login Successful!', response.data)
        }
      } catch (error: any) {
        console.error(error)
        setGeneralErrorMessage('An error occurred.')
      }
    }
  })

  return (
    <form
      onSubmit={formik.handleSubmit}
      className="grid grid-cols-12 gap-x-4 gap-y-6"
    >
      {/* Source */}
      <div className="col-span-12">
        {/* Validation Error MSG */}
        {formik.errors.amount ? (
          <div className="text-red-500">{formik.errors.amount}</div>
        ) : null}
        <input
          name="amount"
          type="text"
          className="text-black bg-red-500"
          value={formik.values.amount}
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
        />
      </div>
      {/* Dist */}
      <div className="col-span-12">
        <input
          name="amount"
          type="text"
          className="text-black"
          value={formik.values.amount}
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
        />
      </div>
      {/* Token */}
      {/* Validation Error MSG */}
      {formik.errors.token ? (
        <div className="text-red-500">{formik.errors.token}</div>
      ) : null}
      <div className="col-span-12 text-black">
        <select
          name="token"
          value={formik.values.token}
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
        >
          {tokens.map((token: Token) => {
            return (
              <option value={token.name} key={token.name}>
                {token.name}
              </option>
            )
          })}
        </select>
      </div>

      {/* WrappingMode */}
      <div className="col-span-12">
        {/* Validation Error MSG */}
        {formik.errors.wrappingMode ? (
          <div className="text-red-500">{formik.errors.wrappingMode}</div>
        ) : null}
        <input
          name="wrappingMode"
          type="text"
          className="text-black bg-red-500"
          value={formik.values.wrappingMode}
          onChange={formik.handleChange}
          onBlur={formik.handleBlur}
        />
      </div>
      <button type="submit">Submit</button>
    </form>
  )
}
export default WrapForm
